-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from CMM/Par.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pDef -> Def                                 (1)
	%start_pListDef -> ListDef                         (2)
	Program -> ListDef                                 (3)
	Def -> 'int' 'main' '(' ')' '{' '}'                (4)
	ListDef ->                                         (5)
	ListDef -> ListDef Def                             (6)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { PT _ (TS _ 1) }
	')'            { PT _ (TS _ 2) }
	'int'          { PT _ (TS _ 3) }
	'main'         { PT _ (TS _ 4) }
	'{'            { PT _ (TS _ 5) }
	'}'            { PT _ (TS _ 6) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pDef     rule  1
	%start_pListDef rule  2
	Program         rule  3
	Def             rule  4
	ListDef         rules 5, 6

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	'int'          reduce using rule 5
	%eof           reduce using rule 5

	Program        goto state 8
	ListDef        goto state 4

State 1


	'int'          shift, and enter state 7

	Def            goto state 6

State 2


	'int'          reduce using rule 5
	%eof           reduce using rule 5

	ListDef        goto state 5

State 3



	ListDef        goto state 4

State 4

	Program -> ListDef .                                (rule 3)
	ListDef -> ListDef . Def                            (rule 6)

	'int'          shift, and enter state 7
	%eof           reduce using rule 3

	Def            goto state 10

State 5

	%start_pListDef -> ListDef .                        (rule 2)
	ListDef -> ListDef . Def                            (rule 6)

	'int'          shift, and enter state 7
	%eof           accept

	Def            goto state 10

State 6

	%start_pDef -> Def .                                (rule 1)

	%eof           accept


State 7

	Def -> 'int' . 'main' '(' ')' '{' '}'               (rule 4)

	'main'         shift, and enter state 9


State 8

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 9

	Def -> 'int' 'main' . '(' ')' '{' '}'               (rule 4)

	'('            shift, and enter state 11


State 10

	ListDef -> ListDef Def .                            (rule 6)

	'int'          reduce using rule 6
	%eof           reduce using rule 6


State 11

	Def -> 'int' 'main' '(' . ')' '{' '}'               (rule 4)

	')'            shift, and enter state 12


State 12

	Def -> 'int' 'main' '(' ')' . '{' '}'               (rule 4)

	'{'            shift, and enter state 13


State 13

	Def -> 'int' 'main' '(' ')' '{' . '}'               (rule 4)

	'}'            shift, and enter state 14


State 14

	Def -> 'int' 'main' '(' ')' '{' '}' .               (rule 4)

	'int'          reduce using rule 4
	%eof           reduce using rule 4


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 7
Number of terminals: 6
Number of non-terminals: 6
Number of states: 15
