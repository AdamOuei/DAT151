-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module CMM.Abs where

newtype Id = Id String
  deriving (Eq, Ord, Show, Read)

data Program = Prg [Func]
  deriving (Eq, Ord, Show, Read)

data Func = FDef Type Id Argument Body
  deriving (Eq, Ord, Show, Read)

data Argument = FArgument [Args]
  deriving (Eq, Ord, Show, Read)

data Args = FArgs Type Id
  deriving (Eq, Ord, Show, Read)

data Body = FBody [Stm]
  deriving (Eq, Ord, Show, Read)

data Type = TDouble | TBool | TInt | TVoid
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SDecls Type [Id]
    | SInit Type Id Exp
    | SRet Exp
    | SWhile Exp Stm
    | SIf Exp Stm Stm
    | SBlock [Stm]
  deriving (Eq, Ord, Show, Read)

data Exp
    = EInt Integer
    | EDouble Double
    | EString String
    | ETrue
    | EFalse
    | EId Id
    | ECall Id [Exp]
    | EInc Id
    | EDec Id
    | EInc2 Id
    | EDec2 Id
    | EMul Exp Exp
    | EDiv Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ELess Exp Exp
    | EGre Exp Exp
    | ELeq Exp Exp
    | EGeq Exp Exp
    | EEqua Exp Exp
    | EIneq Exp Exp
    | EConj Exp Exp
    | EDisj Exp Exp
    | EAss Id Exp
    | ETyped Exp Type
  deriving (Eq, Ord, Show, Read)

