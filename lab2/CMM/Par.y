-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module CMM.Par where
import CMM.Abs
import CMM.Lex
import CMM.ErrM

}

%name pProgram Program
%name pFunc Func
%name pArgument Argument
%name pArgs Args
%name pBody Body
%name pListArgs ListArgs
%name pListFunc ListFunc
%name pType Type
%name pListId ListId
%name pStm Stm
%name pListStm ListStm
%name pExp7 Exp7
%name pExp6 Exp6
%name pExp5 Exp5
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp1 Exp1
%name pExp Exp
%name pListExp ListExp
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '&&' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  ')' { PT _ (TS _ 4) }
  '*' { PT _ (TS _ 5) }
  '+' { PT _ (TS _ 6) }
  '++' { PT _ (TS _ 7) }
  ',' { PT _ (TS _ 8) }
  '-' { PT _ (TS _ 9) }
  '--' { PT _ (TS _ 10) }
  '/' { PT _ (TS _ 11) }
  ';' { PT _ (TS _ 12) }
  '<' { PT _ (TS _ 13) }
  '<=' { PT _ (TS _ 14) }
  '=' { PT _ (TS _ 15) }
  '==' { PT _ (TS _ 16) }
  '>' { PT _ (TS _ 17) }
  '>=' { PT _ (TS _ 18) }
  'bool' { PT _ (TS _ 19) }
  'double' { PT _ (TS _ 20) }
  'else' { PT _ (TS _ 21) }
  'false' { PT _ (TS _ 22) }
  'if' { PT _ (TS _ 23) }
  'int' { PT _ (TS _ 24) }
  'return' { PT _ (TS _ 25) }
  'true' { PT _ (TS _ 26) }
  'void' { PT _ (TS _ 27) }
  'while' { PT _ (TS _ 28) }
  '{' { PT _ (TS _ 29) }
  '||' { PT _ (TS _ 30) }
  '}' { PT _ (TS _ 31) }
  L_integ  { PT _ (TI $$) }
  L_doubl  { PT _ (TD $$) }
  L_quoted { PT _ (TL $$) }
  L_Id { PT _ (T_Id $$) }

%%

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

Double  :: { Double }
Double   : L_doubl  { (read ( $1)) :: Double }

String  :: { String }
String   : L_quoted {  $1 }

Id :: { Id}
Id  : L_Id { Id ($1)}

Program :: { Program }
Program : ListFunc { CMM.Abs.Prg (reverse $1) }
Func :: { Func }
Func : Type Id Argument Body { CMM.Abs.FDef $1 $2 $3 $4 }
Argument :: { Argument }
Argument : '(' ListArgs ')' { CMM.Abs.FArgument $2 }
Args :: { Args }
Args : Type Id { CMM.Abs.FArgs $1 $2 }
Body :: { Body }
Body : '{' ListStm '}' { CMM.Abs.FBody (reverse $2) }
ListArgs :: { [Args] }
ListArgs : {- empty -} { [] }
         | Args { (:[]) $1 }
         | Args ',' ListArgs { (:) $1 $3 }
ListFunc :: { [Func] }
ListFunc : {- empty -} { [] } | ListFunc Func { flip (:) $1 $2 }
Type :: { Type }
Type : 'double' { CMM.Abs.TDouble }
     | 'bool' { CMM.Abs.TBool }
     | 'int' { CMM.Abs.TInt }
     | 'void' { CMM.Abs.TVoid }
ListId :: { [Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }
Stm :: { Stm }
Stm : Exp ';' { CMM.Abs.SExp $1 }
    | Type ListId ';' { CMM.Abs.SDecls $1 $2 }
    | Type Id '=' Exp ';' { CMM.Abs.SInit $1 $2 $4 }
    | 'return' Exp ';' { CMM.Abs.SRet $2 }
    | 'while' '(' Exp ')' Stm { CMM.Abs.SWhile $3 $5 }
    | 'if' '(' Exp ')' Stm 'else' Stm { CMM.Abs.SIf $3 $5 $7 }
    | '{' ListStm '}' { CMM.Abs.SBlock (reverse $2) }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Exp7 :: { Exp }
Exp7 : Integer { CMM.Abs.EInt $1 }
     | Double { CMM.Abs.EDouble $1 }
     | String { CMM.Abs.EString $1 }
     | 'true' { CMM.Abs.ETrue }
     | 'false' { CMM.Abs.EFalse }
     | Id { CMM.Abs.EId $1 }
     | Id '(' ListExp ')' { CMM.Abs.ECall $1 $3 }
     | Id '++' { CMM.Abs.EInc $1 }
     | Id '--' { CMM.Abs.EDec $1 }
     | '++' Id { CMM.Abs.EInc2 $2 }
     | '--' Id { CMM.Abs.EDec2 $2 }
     | '(' Exp ')' { $2 }
Exp6 :: { Exp }
Exp6 : Exp6 '*' Exp7 { CMM.Abs.EMul $1 $3 }
     | Exp6 '/' Exp7 { CMM.Abs.EDiv $1 $3 }
     | Exp7 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 '+' Exp6 { CMM.Abs.EAdd $1 $3 }
     | Exp5 '-' Exp6 { CMM.Abs.ESub $1 $3 }
     | Exp6 { $1 }
Exp4 :: { Exp }
Exp4 : Exp5 '<' Exp5 { CMM.Abs.ELess $1 $3 }
     | Exp5 '>' Exp5 { CMM.Abs.EGre $1 $3 }
     | Exp5 '<=' Exp5 { CMM.Abs.ELeq $1 $3 }
     | Exp5 '>=' Exp5 { CMM.Abs.EGeq $1 $3 }
     | Exp5 '==' Exp5 { CMM.Abs.EEqua $1 $3 }
     | Exp5 '!=' Exp4 { CMM.Abs.EIneq $1 $3 }
     | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '&&' Exp4 { CMM.Abs.EConj $1 $3 } | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp2 '||' Exp3 { CMM.Abs.EDisj $1 $3 } | Exp3 { $1 }
Exp1 :: { Exp }
Exp1 : Id '=' Exp1 { CMM.Abs.EAss $1 $3 } | Exp2 { $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

